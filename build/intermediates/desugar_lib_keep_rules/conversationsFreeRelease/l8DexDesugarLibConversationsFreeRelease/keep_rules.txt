-keep class j$.time.Duration {
  public static j$.time.Duration ofMillis(long);
}
-keep interface j$.util.Comparator {
  public java.util.Comparator reversed();
  public java.util.Comparator thenComparing(java.util.Comparator);
  public java.util.Comparator thenComparing(java.util.function.Function);
  public java.util.Comparator thenComparing(java.util.function.Function,java.util.Comparator);
  public java.util.Comparator thenComparingDouble(java.util.function.ToDoubleFunction);
  public java.util.Comparator thenComparingInt(java.util.function.ToIntFunction);
  public java.util.Comparator thenComparingLong(java.util.function.ToLongFunction);
}
-keep class j$.util.Comparator$-CC {
  public static java.util.Comparator $default$thenComparing(java.util.Comparator,java.util.Comparator);
  public static java.util.Comparator $default$thenComparing(java.util.Comparator,java.util.function.Function);
  public static java.util.Comparator $default$thenComparing(java.util.Comparator,java.util.function.Function,java.util.Comparator);
  public static java.util.Comparator $default$thenComparingDouble(java.util.Comparator,java.util.function.ToDoubleFunction);
  public static java.util.Comparator $default$thenComparingInt(java.util.Comparator,java.util.function.ToIntFunction);
  public static java.util.Comparator $default$thenComparingLong(java.util.Comparator,java.util.function.ToLongFunction);
  public static java.util.Comparator comparing(java.util.function.Function);
  public static java.util.Comparator comparing(java.util.function.Function,java.util.Comparator);
}
-keep class j$.util.DesugarCollections {
  public static java.util.Map synchronizedMap(java.util.Map);
}
-keep class j$.util.DesugarTimeZone {
  public static java.util.TimeZone getTimeZone(java.lang.String);
}
-keep interface j$.util.Map {
  public java.lang.Object compute(java.lang.Object,java.util.function.BiFunction);
  public java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function);
  public java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction);
  public void forEach(java.util.function.BiConsumer);
  public java.lang.Object getOrDefault(java.lang.Object,java.lang.Object);
  public java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction);
  public java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object);
  public boolean remove(java.lang.Object,java.lang.Object);
  public java.lang.Object replace(java.lang.Object,java.lang.Object);
  public boolean replace(java.lang.Object,java.lang.Object,java.lang.Object);
  public void replaceAll(java.util.function.BiFunction);
}
-keep class j$.util.Map$-CC {
  public static java.lang.Object $default$compute(java.util.Map,java.lang.Object,java.util.function.BiFunction);
  public static java.lang.Object $default$computeIfAbsent(java.util.Map,java.lang.Object,java.util.function.Function);
  public static java.lang.Object $default$computeIfPresent(java.util.Map,java.lang.Object,java.util.function.BiFunction);
  public static void $default$forEach(java.util.Map,java.util.function.BiConsumer);
  public static java.lang.Object $default$merge(java.util.Map,java.lang.Object,java.lang.Object,java.util.function.BiFunction);
  public static java.lang.Object $default$putIfAbsent(java.util.Map,java.lang.Object,java.lang.Object);
  public static boolean $default$remove(java.util.Map,java.lang.Object,java.lang.Object);
  public static java.lang.Object $default$replace(java.util.Map,java.lang.Object,java.lang.Object);
  public static boolean $default$replace(java.util.Map,java.lang.Object,java.lang.Object,java.lang.Object);
  public static void $default$replaceAll(java.util.Map,java.util.function.BiFunction);
}
-keep class j$.util.Objects {
  public static boolean equals(java.lang.Object,java.lang.Object);
  public static int hash(java.lang.Object[]);
  public static int hashCode(java.lang.Object);
  public static boolean nonNull(java.lang.Object);
  public static java.lang.Object requireNonNull(java.lang.Object);
  public static java.lang.Object requireNonNull(java.lang.Object,java.lang.String);
  public static java.lang.String toString(java.lang.Object,java.lang.String);
}
-keep class j$.util.Optional {
  public static j$.util.Optional empty();
  public static j$.util.Optional of(java.lang.Object);
  public static j$.util.Optional ofNullable(java.lang.Object);
  public java.lang.Object orElse(java.lang.Object);
}
-keep class j$.util.concurrent.ConcurrentHashMap {
  public <init>();
  public boolean containsValue(java.lang.Object);
  public java.util.Set entrySet();
  public java.lang.Object get(java.lang.Object);
  public java.lang.Object put(java.lang.Object,java.lang.Object);
  public java.lang.Object remove(java.lang.Object);
  public java.util.Collection values();
}
-keep interface j$.util.concurrent.ConcurrentMap {
  public java.lang.Object compute(java.lang.Object,java.util.function.BiFunction);
  public java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function);
  public java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction);
  public void forEach(java.util.function.BiConsumer);
  public java.lang.Object getOrDefault(java.lang.Object,java.lang.Object);
  public java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction);
  public void replaceAll(java.util.function.BiFunction);
}
-keep class j$.util.concurrent.ConcurrentMap$-CC {
  public static java.lang.Object $default$compute(java.util.concurrent.ConcurrentMap,java.lang.Object,java.util.function.BiFunction);
  public static java.lang.Object $default$computeIfAbsent(java.util.concurrent.ConcurrentMap,java.lang.Object,java.util.function.Function);
  public static java.lang.Object $default$computeIfPresent(java.util.concurrent.ConcurrentMap,java.lang.Object,java.util.function.BiFunction);
  public static void $default$forEach(java.util.concurrent.ConcurrentMap,java.util.function.BiConsumer);
  public static java.lang.Object $default$merge(java.util.concurrent.ConcurrentMap,java.lang.Object,java.lang.Object,java.util.function.BiFunction);
  public static void $default$replaceAll(java.util.concurrent.ConcurrentMap,java.util.function.BiFunction);
}
-keep class j$.util.concurrent.ThreadLocalRandom {
  public static j$.util.concurrent.ThreadLocalRandom current();
}
-keep class j$.util.function.Consumer$-CC {
  public static java.util.function.Consumer $default$andThen(java.util.function.Consumer,java.util.function.Consumer);
}
-keep class j$.util.function.Function$-CC {
  public static java.util.function.Function $default$andThen(java.util.function.Function,java.util.function.Function);
  public static java.util.function.Function $default$compose(java.util.function.Function,java.util.function.Function);
}
-keep interface j$.util.stream.IntStream {
}
-keep class j$.util.stream.IntStream$VivifiedWrapper {
  public static j$.util.stream.IntStream convert(java.util.stream.IntStream);
}
-keep class j$.util.stream.IntStream$Wrapper {
  public static java.util.stream.IntStream convert(j$.util.stream.IntStream);
}
-keep interface java.util.function.BiConsumer {
}
-keep interface java.util.function.BiFunction {
  public java.lang.Object apply(java.lang.Object,java.lang.Object);
}
-keep interface java.util.function.Consumer {
  public void accept(java.lang.Object);
}
-keep interface java.util.function.Function {
  public java.lang.Object apply(java.lang.Object);
}
-keep interface java.util.function.ToDoubleFunction {
}
-keep interface java.util.function.ToIntFunction {
}
-keep interface java.util.function.ToLongFunction {
}
